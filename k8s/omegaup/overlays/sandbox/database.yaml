apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
  - ReadWriteOnce
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  00-create-metadata.sql: |
    CREATE DATABASE IF NOT EXISTS `_omegaup_metadata`;
    CREATE USER IF NOT EXISTS 'omegaup'@'localhost' IDENTIFIED BY 'omegaup';
    FLUSH PRIVILEGES;
  docker.cnf: |
    [mysqld]
    skip-host-cache
    skip-name-resolve
    key_buffer_size         = 16M
    read_buffer_size        = 60K
    sort_buffer_size        = 1M
    innodb_buffer_pool_size = 64M
    tmp_table_size          = 8M
    max_allowed_packet      = 16M
    thread_stack            = 192K
    thread_cache_size       = 8
    myisam_recover_options = BACKUP
    max_connections        = 25
---
apiVersion: apps/v1
kind: Deployment

metadata:
  name: mysql-deployment
  labels:
    app.kubernetes.io/name: mysql
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: "8.0"
    spec:
      containers:
      - image: mysql:8.0
        name: mysql
        env:
        - name: MYSQL_DATABASE
          value: omegaup
        - name: MYSQL_USER
          value: omegaup
        - name: MYSQL_ROOT_PASSWORD
          value: omegaup
        - name: MYSQL_PASSWORD
          value: omegaup
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysql-entrypoint-initdb-config
          mountPath: /docker-entrypoint-initdb.d
        - name: mysql-config
          mountPath: /etc/mysql/conf.d/docker.cnf
          subPath: docker.cnf
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-entrypoint-initdb-config
        configMap:
          name: mysql-config
          items:
            - key: 00-create-metadata.sql
              path: 00-create-metadata.sql
      - name: mysql-config
        configMap:
          name: mysql-config
          items:
            - key: docker.cnf
              path: docker.cnf
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  labels:
    app.kubernetes.io/name: mysql
spec:
  selector:
    app.kubernetes.io/name: mysql
  ports:
  - name: http
    protocol: TCP
    port: 3306
    targetPort: 3306
---
apiVersion: batch/v1
kind: Job

metadata:
  name: db-migrate
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: db-migrate
        app.kubernetes.io/part-of: frontend
    spec:
      containers:
      - name: db-migrate
        image: omegaup/frontend-sidecar
        imagePullPolicy: IfNotPresent
        command: [
          '/opt/omegaup/stuff/db-migrate.py',
          '--verbose',
          '--username=root',
          '--password=omegaup',
          '--hostname=mysql-service',
          'migrate',
          '--databases=omegaup',
        ]
        volumeMounts:
        - name: omegaup
          mountPath: /opt/omegaup
      initContainers:
      - name: init-volume
        image: omegaup/frontend
        imagePullPolicy: IfNotPresent
        command: ['rsync', '-az', '/opt/omegaup/', '/mnt/omegaup/']
        volumeMounts:
        - name: omegaup
          mountPath: /mnt/omegaup
      volumes:
      - name: omegaup
        emptyDir: {}
      restartPolicy: Never
  parallelism: 1
  completions: 1
  backoffLimit: 1
